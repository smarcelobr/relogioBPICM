** BUILDING FIRMWARE **
Primeiro, deve-se fazer as mudanças nos arquivos de header (.h)
como o user_config.h, user_modules.h e outros. Os arquivos que
alterei para o projeto do  relógio estão na mesma página que esse
LEIAME.txt.


=========================================

RASPBERRY PI (*nux)
-------------------

Comandos para compilar o firmware do nodemcu no RASPBERRY:

$ export PATH=$PATH:/home/pi/aplicativos/esp8266-linux-arm_32-20191111.0/bin

$ make TOOLCHAIN_ROOT=~/xtensa/esp8266-linux-arm_32-20191111.0/

(ref.: https://github.com/nodemcu/nodemcu-firmware/issues/2958)



** FLASHING FIRMWARE **
Para saber o tamanho do FLASH:
$ cd /home/pi/.local/lib/python3.7/site-packages
$ python3.7 esptool.py --port /dev/ttyUSB0 flash_id

Para fazer a gravação do firmware (flashing):

esptool.py --port <serial-port-of-ESP8266> write_flash -fm <flash-mode> 0x00000 <nodemcu-firmware>.bin

$ cd /home/pi/.local/lib/python3.7/site-packages
$ python3.7 esptool.py --port /dev/ttyUSB0 write_flash -fm dio 0x00000 /home/pi/github/nodemcu-firmware/bin/0x00000.bin
$ esptool.py --port /dev/ttyUSB0 write_flash -fm dio 0x10000 /home/pi/github/nodemcu-firmware/bin/0x10000.bin

** Fazendo a imagem do LFS ***

$ cd /home/pi/esp8266/projetos/relogioBPICM/lfs
$ /home/pi/github/nodemcu-firmware/luac.cross.int -o lfs.img -f *.lua

** UPLOAD arquivos para SPIFFS **

$ nodemcu-tool upload --port=/dev/ttyUSB0 lfs.img

Toda a vez que atualizar a imagem do LFS, deve executar o seguinte comando no nodemcu:

> node.flashreload("lfs.img")

uma alternativa para executar o comando acima usando o nodemcu-tool:

$ nodemcu-tool --port=/dev/ttyUSB0 run reload_lfs.lua

O nodemcu vai resetar automaticamente.


=========================================---------------------
* WINDOWS 10 e Docker *

Instruções no link: https://nodemcu.readthedocs.io/en/master/build/
e https://hub.docker.com/r/marcelstoer/nodemcu-build/

* NOVO FIRMWARE *

1) Abrir o PowerShell e ir na pasta onde está o clone de https://github.com/nodemcu/nodemcu-firmware
> D:
> cd \smarc\ESP8266\nodemcu-firmware
2) executar o comando:
# XPTO bash
$ docker run --rm -ti -v D:\\smarc\\ESP8266\\nodemcu-firmware:/opt/nodemcu-firmware marcelstoer/nodemcu-build build
docker run --rm -ti -v c:\\Users\\Public\\trabalho\\projetos\\github\\nodemcu-firmware:/opt/nodemcu-firmware marcelstoer/nodemcu-build build
# NATALENE PowerShell:
docker run --rm -ti -v c:\Users\smarc\esp8266\nodemcu-firmware:/opt/nodemcu-firmware marcelstoer/nodemcu-build build
( No windows, o Docker só irá conseguir fazer o mount de "D:\\smarc\\ESP8266\\nodemcu-firmware" se
ele for uma das pastas da lista de sharing das configurações do Docker Desktop.)

3) pegar os dois binários que estarão na pasta D:\smarc\ESP8266\nodemcu-firmware\bin
- 0x00000.bin will contain just the firmware.
- 0x10000.bin will contain the SPIFFS.

* FLASHING FIRMWARE *

Análogo ao do Raspberry, usando o esptool.py

> esptool.py --port COM3 write_flash -fm dio 0x00000 D:\smarc\ESP8266\nodemcu-firmware\bin\0x00000.bin
> esptool.py --port COM3 write_flash -fm dio 0x10000 D:\smarc\ESP8266\nodemcu-firmware\bin\0x10000.bin
## NATALENE PowerShell:
$ esptool.py --port COM3 write_flash -fm dio 0x00000 c:\Users\smarc\esp8266\nodemcu-firmware\bin\0x00000.bin
$ esptool.py --port COM3 write_flash -fm dio 0x10000 c:\Users\smarc\esp8266\nodemcu-firmware\bin\0x10000.bin

Apagar o flash antes de gravar pode corrigir problemas de boot
$ esptool.py --port COM3 write_flash -fm dio 0x00000 c:\Users\smarc\esp8266\nodemcu-firmware\bin\0x00000.bin
esptool.py --port COM3 write_flash -fm dio 0x00000 c:\Users\smarc\esp8266\nodemcu-firmware\bin\nodemcu_integer_release_20201227-2216.bin

* NOVO LFS *


> docker run --rm -ti -v D:\\smarc\\ESP8266\\nodemcu-firmware:/opt/nodemcu-firmware -v D:\\smarc\\IdeaProjects\\relogioBPICM\\lfs:/opt/lua marcelstoer/nodemcu-build lfs-image
NATALENE:
docker run --rm -ti -v c:\Users\smarc\esp8266\nodemcu-firmware:/opt/nodemcu-firmware -v \\wsl$\Ubuntu\home\sergio\IdeaProjects\relogioBPICM\lfs:/opt/lua marcelstoer/nodemcu-build lfs-image

* Uploading files to SPIFFS *

Igual ao do raspberry, usando o nodemcu-tool.

> cd D:\smarc\IdeaProjects\relogioBPICM\lfs
> nodemcu-tool upload --port=COM3 LFS_integer_20200921-0058.img --remotename lfs.img
> nodemcu-tool -p COM3 run reload_lfs.lua
   ou, no terminal:
> node.LFS.reload("lfs.img")
> old: node.flashreload("lfs.img")
>


=========================================
** Comandos uteis para usar no terminal com o ESP8266 **

Para acionar o terminal:
$ nodemcu-tool -p COM3 -b 115200 terminal

Listar arquivos: (requer util.lua)
$ listfs()

Excluir um arquivo:
$ file.remove("lfs.img")

Renomear Arquivo:
file.rename("LFS_integer_20200921-0020.img","lfs.img")


desligar o motor:

	gpio.mode(1,gpio.OUTPUT);
	gpio.write(1,gpio.HIGH);
	gpio.mode(2,gpio.OUTPUT);
	gpio.write(2,gpio.HIGH)

cancelar a execução ao iniciar:
file.rename('ok.flag','not_ok.flag')

retomar a execução normal:
file.rename('not_ok.flag','ok.flag'); node.restart()

para acertar o ssid do wifi:
cfg.set({'wifi','sta','ssid'}, 'jardimdomeier'); cfg.set({'wifi','sta','pwd'}, 'sergioeluciene'); node.restart()

modo do wifi:
print(wifi.getmode());
print(wifi.sta.getstatus());

Resolver DNS:
net.dns.resolve("www.cachambi.com.br", function(sk, ip)
    if (ip == nil) then print("DNS fail!") else print(ip) end
end)
